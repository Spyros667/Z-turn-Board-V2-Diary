petalinux should be installed through ubuntu. otherwise, menuconfig did not work
open [zedboard] bsp and append langdale
? change * to :append:.., :prepend:..
maybe save build/sstate-cache too
do not mix bsp ([no] 702 for zed), failure to see sd_card
xsa did not reset config (neither kernel)
add? build-essential (and? -dev)
Vitis: delete libcrypto.so* if problems (like version OPENSSL_3.2.0 not found (required by /usr/lib64/libcryptsetup.so)


dma-proxy:
	ptusysClass = class_create(THIS_MODULE, CLASS_NAME);
	-> ptusysClass = class_create(CLASS_NAME);

dma-proxy: doc: For the AXI DMA IP the transmit channel is always 0 and
 * the receive is always 1.
dma-proxy w/ scatter gather (and interrupt controller [for Zynq])
single interface was ok

probably petalinux-build -x mrproper after new xsa

probably 4 mb SD card w/ boot flag (at fat32)

##############################################################################

Zedboard + Zynq + Microblaze V

Docs:
* https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842424/Execute+Microblaze+Application+from+PS+DDR
* https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18841793/Utilizing+PS+memory+to+execute+Microblaze+application+on+Zynq+Ultrascale

define FSBL_DEBUG_INFO manually (bug: Vitis: -DFSBL_DEBUG_INFO did not work)

steps:
block design:
	* Zynq:
		* S_GP0
		* S_HP0
		* EMIO size=1
	* Microblaze V:
		* Microcontroller (preset)
		* (no interrupt)
		* (no local memory (all will reside in DDR))
		* DP/(IP)/DC/(IC)
			* (DC/IC @ HP)
			* DP/IP @ GP
			: GP for access to memory regions(?)
			: HP for DDR access
			: !!! IMPORTANT (?) No GP DDR, (even 0 to 0x10) (second try)
			: BUG: HP @ 
		* Discrete Ports
		* sleep until FSLB finishes (i.e.: [microblaze] program loaded onto RAM)
			* 01 @ reset_mode
			* GPIO_O & microblaze(dbg_wakeup) @ wakeup
		* Problem: Microblaze starts from start of memory (0x0 or 0x10..). How to set start vector (linker did not work)?
	* Address map
		* No GP0_DDR because Zynq/FSLB already has access to full DDR (i.e. from 0 to FF)
		* yes GP0_QSPI because of error in vitis
		* yes IOP
		* HP0 above FSLB (above 30000), e.g.: 256MB from 0x1000_0000 to 0x1FFF_FFFF
		* ουσιαστικά θα είναι 2 περιοχές: Data/Instruction για τον microblaze. φαντάζομαι αυτό δηλώνει microblaze πρόσβαση στο _
	* Traffic generator
		* Transaction Depth (32) @ supremum of commands in `data.coe`
		* acts immediately after reset
	* DMA
		* Burst (max): "AXI-Stream contiguous bytes"
		* Width of Buffer Length Register (18): Probably maximum transfer request. for 32KB it should be 15 bits wide
	* AXI-Stream FIFO w/ Traffic Generator @ RX
		* (RX!) Fifo depth should probably be supremum of <traffic generator> transactions
			* (watch out for value of the <full threshold>)

Vitis:
	* platform for microblaze (including FSBL)
		* QSPI error: -DXPAR_XQSPIPS_0_QSPI_MODE=XQSPIPS_CONNECTION_MODE_SINGLE (check under block design / zynq)
		* manual debug @ fsbl_debug.h : `#define FSBL_DEBUG_INFO`
		* hook for wakeup @ FsblHookBeforeHandoff: (FsblHookFallback did not get called())
			// Wakeup "Microblaze"
			// -
			fsbl_printf(DEBUG_INFO, "##################### Toggle GP0 from fallback \r\n");
			Xil_Out32(0xE000A284, 0x1);
			Xil_Out32(0xE000A048, 0x1);

			// Wakeup "Microblaze"
			// -
			fsbl_printf(DEBUG_INFO, "> > > > > > > > > > > Toggle GP0 @ main exit ?\r\n");
			Xil_Out32(0xE000A284, 0x1);
			Xil_Out32(0xE000A048, 0x1);
		* Info:
			* lscript.ld configures memory regions (fsbl already has full access)
			* settings/<processor> chooses peripherals! you can choose external uart (uartlite) (for either fsbl or the application)
	* application for microblaze
		* additional code:
			#include "sleep.h"
			usleep(100000);
		* lscript.ld (memory regions)
			* Base address @ start of HP
			(size to 256MB)
			* stack/heap e.g.: 100000/100000 (problem @ 600_0000/400_0000, second problem with large classes > fixed with vector:heap:100000)
		* no fflush(NULL/stdout) > many problems
			* yes printf(\n\r)
			* yes getchar()
